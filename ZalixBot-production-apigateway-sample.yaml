openapi: "3.0.1"
info:
  title: "ZalixBot"
  version: "2018-12-02T17:44:46Z"
servers:
- url: "https://<CUSTOM_BOT_URL>"
paths:
  /{token}/notify-admin:
    post:
      parameters:
      - name: "Content-Type"
        in: "header"
        schema:
          type: "string"
      - name: "token"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notify"
        required: true
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "<CUSTOM_LAMBDA_ARN>"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.token: "method.request.path.token"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\":\n{\n#set($queryMap = $input.params().path)\n\
            \n#foreach($key in $queryMap.keySet())\n  \"$key\" : \"$queryMap.get($key)\"\
            \n  #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user-agent\"\
            \ : \"$context.identity.userAgent\",\n    \"request-id\" : \"$context.requestId\"\
            \n    }\n}\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /{token}:
    post:
      parameters:
      - name: "Content-Type"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "token"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        uri: "<CUSTOM_LAMBDA_ARN>"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.token: "method.request.path.token"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\":\n{\n#set($queryMap = $input.params().path)\n\
            \n#foreach($key in $queryMap.keySet())\n  \"$key\" : \"$queryMap.get($key)\"\
            \n  #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"http-method\"\
            \ : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n  \
            \  \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user-agent\"\
            \ : \"$context.identity.userAgent\",\n    \"request-id\" : \"$context.requestId\"\
            \n    }\n}\n"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    notify:
      title: "Notify Schema"
      type: "object"
      properties:
        notify:
          type: "string"
